== 0.1.0 2008-09-04
* make a ruby gem
* deal with association rules that only have 1 item

* newgem thoughts:
  * Ability for README.txt and website to be the same thing
  * syntax highlighting on website

== 0.0.1 2008-09-02

+ Clean up documentation
  * website
  + README.txt
  + get documentation to build
  + create example files
  + apriori.rb

+ Clean up licensing everywhere
+ get the typical install to work
+ clean up the rakefile
+ refactor find_itemsets to be find_association_rules

= What options to support later:

-t#      target type (default: association rules)
         (s: item sets, c: closed item sets, m: maximal item sets,
          r: association rules, h: association hyperedges)
-k#      item separator for output (default: " ")
-p#      output format for support/confidence (default: "%.1f")
-y       print lift value (confidence divided by prior)
-g       write output in scanable form (quote certain characters)

-q#      sort items w.r.t. their frequency (default: 2)
         (1: ascending, -1: descending, 0: do not sort,
          2: ascending, -2: descending w.r.t. transaction size sum)
-b/f/r#  blank characters, field and record separators
         (default: " \t\r", " \t", "\n")
appfile  file stating item appearances (optional)


= What options to support even later:
-e#      additional evaluation measure (default: none)
-!       print a list of additional evaluation measures
-d#      minimal value of additional evaluation measure (default: 10%)
-v       print value of additional rule evaluation measure
-l       do not load transactions into memory (work on input file)
-u#      filter unused items from transactions (default: 0.1)
         (0: do not filter items w.r.t. usage in sets,
         <0: fraction of removed items for filtering,
         >0: take execution times ratio into account)
-h       do not organize transactions as a prefix tree
-j       use quicksort to sort the transactions (default: heapsort)
-z       minimize memory usage (default: maximize speed)
-C#      comment characters (default: "#")


Don't even know what they do: 
-o       use original definition of the support of a rule (body & head)
-x       extended support output (print both rule support types)

